// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter2, util, _;

  if (typeof window !== "undefined" && window !== null) {
    EventEmitter2 = require('EventEmitter2').EventEmitter2;
    _ = require('./lodash')._;
  } else {
    EventEmitter2 = require('eventemitter2').EventEmitter2;
    _ = require('lodash');
  }

  module.exports = util = {
    _: _,
    EventEmitter: EventEmitter2,
    getType: function(obj) {
      return Object.prototype.toString.call(obj).slice(8, -1);
    },
    objInclude: function(target, list) {
      var keys, name, _i, _len;
      if (util.getType(target) !== 'Object') {
        return false;
      }
      keys = (function() {
        switch (util.getType(list)) {
          case 'Array':
            return list;
          case 'String':
            return [list];
          case 'Object':
            return Object.keys(list);
          default:
            return null;
        }
      })();
      if (keys == null) {
        return false;
      }
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        name = keys[_i];
        if (!target[name]) {
          return false;
        }
      }
      return true;
    },
    empty: function(obj) {
      if (obj == null) {
        return true;
      }
      switch (util.getType(obj)) {
        case 'Object':
          return Object.keys(obj).length === 0;
        case 'Array':
        case 'String':
          return obj.length === 0;
        default:
          return false;
      }
    },
    contains: function(target, test) {
      return _.isEqual(target, test, function(left, right) {
        var newLeft;
        if (_.isPlainObject(left) && _.isPlainObject(right)) {
          newLeft = _.pick(left, _.keys(right));
          return _.isEqual(newLeft, right);
        }
      });
    },
    indexContaining: function(list, test) {
      var el, index, _i, _len;
      for (index = _i = 0, _len = list.length; _i < _len; index = ++_i) {
        el = list[index];
        if (util.contains(el, test)) {
          return index;
        }
      }
      return null;
    },
    box: function(val) {
      if (val == null) {
        return [];
      }
      if (util.getType(val) === 'Array') {
        return val;
      } else {
        return [val];
      }
    }
  };

}).call(this);
