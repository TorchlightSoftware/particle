// Generated by CoffeeScript 1.6.3
(function() {
  var Client, Collector, EventEmitter, applyOp, find, getEventPath, objInclude, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./util'), objInclude = _ref.objInclude, find = _ref.find, _ = _ref._, EventEmitter = _ref.EventEmitter;

  Client = require('./client');

  applyOp = require('./applyOp');

  getEventPath = function(root, path) {
    if (path === '.') {
      return root;
    } else {
      return "" + root + "." + path;
    }
  };

  Collector = (function(_super) {
    __extends(Collector, _super);

    function Collector(options) {
      var status,
        _this = this;
      if (options == null) {
        options = {};
      }
      status = 'waiting';
      this.data = {};
      this.received = {};
      this.identity = options.identity || {};
      this.network = options.network || {};
      this.debug = options.onDebug || function() {};
      this.onData = options.onData || function() {};
      this.error = options.onError || console.error;
      Collector.__super__.constructor.call(this, {
        wildcard: true,
        maxListeners: Infinity
      });
      this.onRegister = options.onRegister || function(identity, receiver, err) {
        _this.client = Client(_this.network);
        return _this.client.register(identity, receiver, err);
      };
      this.on('ready', function() {
        _this.debug('ready!');
        return _this.status = 'ready';
      });
      this.on('data', function(data, event) {
        var eventName;
        this.debug('Sending new data notification!');
        eventName = getEventPath(event.root, event.path);
        this.emit(eventName, data, event);
        return this.onData(data, event);
      });
    }

    Collector.prototype.register = function(done) {
      var _this = this;
      done || (done = function() {});
      return this.onRegister(this.identity, this.receive.bind(this), function(err) {
        done(err);
        if (err) {
          return _this.error({
            context: 'Stream: Registration failed.',
            error: err
          });
        } else {
          return _this.debug('Registered with Stream.');
        }
      });
    };

    Collector.prototype.receive = function(name, event) {
      var _this = this;
      this.lastUpdated = new Date(event.timestamp);
      this.debug('Received data.', {
        name: name,
        event: event
      });
      switch (name) {
        case 'manifest':
          this.manifest = event;
          return this.checkReady();
        case 'payload':
          applyOp(this.data, event);
          this.emit('data', this.data, event);
          if (event.origin === 'end payload') {
            this.received[event.root] = true;
          }
          return this.checkReady();
        case 'delta':
          return this.ready(function() {
            applyOp(_this.data, event);
            return _this.emit('data', _this.data, event);
          });
      }
    };

    Collector.prototype.checkReady = function() {
      var checkManifest, ready;
      checkManifest = function(received, manifest) {
        var name;
        if (manifest == null) {
          return false;
        }
        for (name in manifest) {
          if (name !== 'timestamp') {
            if (!received[name]) {
              return false;
            }
          }
        }
        return true;
      };
      ready = checkManifest(this.received, this.manifest);
      this.debug("Checking if we're ready...", {
        manifest: this.manifest != null,
        allReceived: ready
      });
      if (ready) {
        return this.emit('ready');
      }
    };

    Collector.prototype.ready = function(done) {
      if (this.status === 'ready') {
        return done();
      } else {
        return this.once('ready', done);
      }
    };

    Collector.prototype.reset = function(done) {
      var name;
      for (name in this.data) {
        delete this.data[name];
      }
      this.status = 'loading';
      return this.ready(done);
    };

    return Collector;

  })(EventEmitter);

  module.exports = Collector;

}).call(this);
